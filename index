#!/bin/sh

# enable debug mode
if [ "$DEBUG" = "yes" ]; then
	set -x
fi

# different operating systems.
case $(uname -s) in
Linux)
	echo 'warning: OS not tested yet'
	pathresolve() {
		local p=$1;
		if [ -z $p ]; then read -r p; fi
		readlink -e $p
	}
	export GITTEMPLATE_SCRIPT_PATH=`pathresolve "$0"`
	;;
FreeBSD|OpenBSD|NetBSD)
	echo 'warning: OS not tested yet'
	pathresolve() {
		local p=$1;
		if [ -z $p ]; then read -r p; fi
		realpath $p
	}
	export GITTEMPLATE_SCRIPT_PATH=`pathresolve "$0"`
	
	;;
Darwin)
	echo 'warning: OS not tested yet'
	pathresolve() {
		local p=$1;
		if [ -z $p ]; then read -r p; fi
		readlink -e $p
	}
	GITTEMPLATE_SCRIPT_PATH="$0"
	while [ -h "$GITTEMPLATE_SCRIPT_PATH" ]; do
		link=$(readlink "$0")
		if expr "$link" : '/.*' > /dev/null; then
			GITTEMPLATE_SCRIPT_PATH="$link"
		else
			GITTEMPLATE_SCRIPT_PATH="$(dirname "$GITTEMPLATE_SCRIPT_PATH")/$link"
		fi
	done
	;;
*MINGW*)
	pathresolve() {
		local p=$1;
		if [ -z $p ]; then read -r p; fi
		readlink -f $p | sed -e 's/\\/\//' -e  's/^[a-zA-Z]/\/\l\0/' -e  's/://'
	}
	export GITTEMPLATE_SCRIPT_PATH=`pathresolve "$0"`
	;;
*CYGWIN*)
	echo 'warning: OS not tested yet'
	pathresolve() {
		local p=$1;
		if [ -z $p ]; then read -r p; fi
		cygpath -u -a $p
	}
	export GITTEMPLATE_SCRIPT_PATH=`pathresolve "$0"`
	;;
*)
	echo 'warning: OS not tested yet'
	pathresolve() {
		local p=$1;
		if [ -z $p ]; then read -r p; fi
		# The sed expression here replaces all backslashes by forward slashes.
		# This helps our Windows users, while not bothering our Unix users.)
		readlink -f $p | sed -e 's/\\/\//'
	}
	export GITTEMPLATE_SCRIPT_PATH=`pathresolve "$0"`
	;;
esac

export GITTEMPLATE_DIR=`dirname $GITTEMPLATE_SCRIPT_PATH`
#posix to windows
#readlink -f $p | sed -e 's/^\///' -e 's/\//\\/g' -e 's/^\([a-zA-Z]\)\([^:].*\)$/\1:\2/' -e 's/^./\u\0/'

usage() {
cat << EOM >&2
usage: git template <subcommand>

Available subcommands are:

   init     init empty template
   add      add a template
   remove   remove template

   config   configure template instance
   unlock   make template editable
   lock     make template uneditable

Try 'git template <subcommand> help' for details.
EOM
}

main() {
	if [ $# -lt 1 ]; then
		usage
		exit 1
	fi

	SUBCOMMAND="$1"; shift
	if [ ! -e "$GITTEMPLATE_DIR/commands/$SUBCOMMAND" ]; then
		usage
		exit 1
	fi

	. "$GITTEMPLATE_DIR/common/index"
	. "$GITTEMPLATE_DIR/commands/$SUBCOMMAND" $@
}

main "$@"