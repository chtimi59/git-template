#!/bin/sh

checkBasic() {
	# do a basic git command
	git-status 1>/dev/null
	# return error code, then exit !
	if [ $? != 0 ]; then
		exit 1
	fi
}

checkAlreadyExist() {
	# multiple template is not supported
	if [ -d "$DEFINE_TEMPLATE_PATH" ]; then
		echo "Template ($DEFINE_TEMPLATE_PATH) already defined"
		echo "to remove it use: git template remove"
		exit 1
	fi
}

delete() {
	# remove submodule in .git/config
	git config -f .git/config --remove-section submodule.$DEFINE_TEMPLATE_PATH >/dev/null 2>&1 
	# remove submodule in .git/modules
	rm -rf .git/modules/$DEFINE_TEMPLATE_PATH >/dev/null 2>&1 
	# remove submodule in .gitmodules
	git config -f .gitmodules --remove-section submodule.$DEFINE_TEMPLATE_PATH >/dev/null 2>&1 
	# if .gitmodules is empty delete it
	[ ! -s .gitmodules ] && rm -f .gitmodules >/dev/null 2>&1 
	# remove submodule folder
	git rm -f "$DEFINE_TEMPLATE_PATH" >/dev/null 2>&1 
	rm -rf "$DEFINE_TEMPLATE_PATH" >/dev/null 2>&1
}
unref_cleancache() {
	# clean up cached files/folders
	# .gitmodules
	git ls-files --error-unmatch .gitmodules >/dev/null 2>&1 && git rm --cached .gitmodules
	# submodule folder
	git ls-files --error-unmatch $DEFINE_TEMPLATE_PATH >/dev/null 2>&1 && git rm --cached $DEFINE_TEMPLATE_PATH
}

yesNoPrompt() {
	[[ -t 0 ]] && read -e -n 1 -p "(Y/n)" res
	if [[ $res =~ ^(y|Y)$ ]]
	then
		return 0 # err=0 mean success
	else
		return 1
	fi
}

dbgShowVars() {
	echo 
	echo -- vars --
	echo GITTEMPLATE_SCRIPT_PATH: \"$GITTEMPLATE_SCRIPT_PATH\"
	echo GITTEMPLATE_DIR: \"$GITTEMPLATE_DIR\"
	echo DEFINE_TEMPLATE_PATH: \"$DEFINE_TEMPLATE_PATH\"
	echo ARGS: \"$@\" # ex: help remove help
	echo SUBCOMMAND: \"$1\" # ex: remove
	echo --
}

# dbgShowVars "$@"


GRAY=$'\e[1;30m'
RED=$'\e[1;31m'
GREEN=$'\e[1;32m'
YELLOW=$'\e[1;33m'
BLUE=$'\e[1;34m'
PINK=$'\e[1;35m'
CYAN=$'\e[1;36m'
WHITE=$'\e[1;37m'
ERROR=$'\e[1;37m\e[41m'
SUCCESS=$'\e[1;37m\e[42m'
CLEAR=$'\e[0m'