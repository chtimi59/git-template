#!/bin/sh
export DEFINE_PWD="$(pwd)"
export DEFINE_TEMPLATE_ROOTPATH="$DEFINE_PWD/.template"
export DEFINE_TEMPLATE_TREEPATH="$DEFINE_TEMPLATE_ROOTPATH/tree"
export DEFINE_TEMPLATE_DATABASE="$DEFINE_TEMPLATE_ROOTPATH/database"
export DEFINE_TEMPLATE_CONFIG="$DEFINE_TEMPLATE_ROOTPATH/config"
export DEFINE_TEMPLATE_PARSEFILE_SRC="$DEFINE_TEMPLATE_ROOTPATH/parse.source"
export DEFINE_TEMPLATE_PARSEFILE_DST="$DEFINE_TEMPLATE_ROOTPATH/parse.destination"

#make it ready for project container commit
lockTemplate() {
	# if .template/tree not available then we assume
	# that template is already lock
	if [ ! -d "$DEFINE_TEMPLATE_TREEPATH" ]; then 
		echo Template already lock
		exit 0
	fi
	# check out empty branch, to remove tree contains
	cd "$DEFINE_TEMPLATE_TREEPATH"
	git checkout --orphan empty >/dev/null 2>&1
	git reset >/dev/null 2>&1
	# only .git should remains, rename it into 'database'
	mv ".git" $DEFINE_TEMPLATE_DATABASE	
	# delete remaining files (still?)
	cd $DEFINE_TEMPLATE_ROOTPATH	
	rm -rf $DEFINE_TEMPLATE_TREEPATH;
}

unlockTemplate() {
	# if .template/tree is available then we assume
	# that template is already unlock
	if [ -d "$DEFINE_TEMPLATE_TREEPATH" ]; then 
		echo Template already unlock
		exit 0
	fi
	mkdir "$DEFINE_TEMPLATE_TREEPATH"
	mv -f $DEFINE_TEMPLATE_DATABASE $DEFINE_TEMPLATE_TREEPATH/.git
	# read current hash if any
	SHA=$(perl "$GITTEMPLATE_DIR/common/config.pl" core.sha);
	echo -$SHA-;
}

checkTemplateExist() {
	if [ ! -d "$DEFINE_TEMPLATE_ROOTPATH" ]; then
		echo "No Template found"
		echo ""
		echo "to add one use: 'git template add' or 'git template init'"
		exit 1
	fi
}

checkTemplateNotExist() {
	# multiple template is not supported
	if [ -d "$DEFINE_TEMPLATE_ROOTPATH" ]; then
		echo "Template ($DEFINE_TEMPLATE_ROOTPATH) already defined"
		echo ""
		echo "to remove it use: 'git template remove'"
		exit 1
	fi
}

delete() {
	# remove template folder
	git rm -rf "$DEFINE_TEMPLATE_ROOTPATH" >/dev/null 2>&1

	# unfortunatly 'git rm -rf' is not enough
	if true; then
		# remove submodule in .git/config
		git config -f .git/config --remove-section submodule.$DEFINE_TEMPLATE_TREEPATH >/dev/null 2>&1
		# remove submodule in .git/modules
		rm -rf .git/modules/$DEFINE_TEMPLATE_ROOT >/dev/null 2>&1 
		# remove submodule in .gitmodules
		git config -f .gitmodules --remove-section submodule.$DEFINE_TEMPLATE_TREEPATH >/dev/null 2>&1 
		# if .gitmodules is empty delete it
		[ ! -s .gitmodules ] && rm -f .gitmodules >/dev/null 2>&1 	
	fi

	# remove 
	rm -r "$DEFINE_TEMPLATE_ROOTPATH" >/dev/null 2>&1 

	# clean up cached files/folders if needed
	git status --porcelain | sed -n 's/^.D \(\.template\/.*\)$/\1/p' | xargs -I {} git rm --cached {}
	git status --porcelain | grep -q "^.D .gitmodules$" && git rm --cached .gitmodules
}

addTemplate() {
	local branch=$1;
	local repo=$2;
	mkdir -p $DEFINE_TEMPLATE_ROOTPATH
	git submodule add -b $branch $repo $DEFINE_TEMPLATE_TREEPATH
	if [ ! -e "$DEFINE_TEMPLATE_TREEPATH" ]; then
		echo "Error couldn't add '$repo'"
		delete
		exit 1
	fi
	mkdir -p $DEFINE_TEMPLATE_OBJECTPATH
	touch $DEFINE_TEMPLATE_CONFIG
}

yesNoPrompt() {
	[[ -t 0 ]] && read -e -n 1 -p "(Y/n)" res
	if [[ $res =~ ^(y|Y)$ ]]
	then
		return 0 # err=0 mean success
	else
		return 1
	fi
}

GRAY=$'\e[1;30m'
RED=$'\e[1;31m'
GREEN=$'\e[1;32m'
YELLOW=$'\e[1;33m'
BLUE=$'\e[1;34m'
PINK=$'\e[1;35m'
CYAN=$'\e[1;36m'
WHITE=$'\e[1;37m'
ERROR=$'\e[1;37m\e[41m'
SUCCESS=$'\e[1;37m\e[42m'
CLEAR=$'\e[0m'