#!/bin/sh
. "$GITTEMPLATE_DIR/common/defs"

checkTemplateExist() {
	if [ ! -d "$DEFINE_TEMPLATE_ROOTPATH" ]; then
		echo $ERROR_COLOR"No Template found"$CLEAR_COLOR
		if [[ "$TEMPLATE_VERBOSE" -gt "0" ]]; then
			echo "Operation aborted (use \"git template clone <repo>\" or \"git template init\")"
		fi
		exit 1
	fi
}

checkTemplateNotExist() {
	# multiple template is not supported
	if [ -d "$DEFINE_TEMPLATE_ROOTPATH" ]; then
		echo $ERROR_COLOR"Template already defined"$CLEAR_COLOR
		if [[ "$TEMPLATE_VERBOSE" -gt "0" ]]; then
			echo "Operation aborted (use \"git template remove\")"
		fi
		exit 1
	fi
}

isLocked() {
	# if .template/tree not available then we assume
	# that template is locked
	if [ ! -d "$DEFINE_TEMPLATE_GITPATH" ]; then
		return 0
	fi
	return 1
}

#make it ready for project container commit
lockTemplate() {
	if isLocked; then 
		#echo Template already lock
		return
	fi
	
	# check git status
	rm -rf "$DEFINE_TEMPLATE_TMP"
	cd "$DEFINE_TEMPLATE_GITPATH"
	local status=$(git status --porcelain)
	if [ ! -z "$status" ]; then
		echo
		printf $ERROR_COLOR"Couldn\'t lock template\n"$CLEAR_COLOR
		echo
		git status \
			| sed 's/git\ add/git\ template\ add/g' \
			| sed 's/git\ reset/git\ template\ reset/g' >&2
		echo
		echo "see also \"git template commit\""
		exit 1 
	fi 
	
	# update current SHA (can be branch, tag, or raw SHA)
	local br=$(git rev-parse --abbrev-ref HEAD)
	if [[ ! $br =~ ^_ ]]; then
		local sha=$(git symbolic-ref -q --short HEAD || git describe --tags --exact-match 2>/dev/null || git rev-parse HEAD)
		perl "$GITTEMPLATE_DIR/common/config.pl" core.sha $sha
	fi

	git checkout --orphan empty >/dev/null 2>&1
	git reset >/dev/null 2>&1
	_lock
}

unlockTemplate() {
	if ! isLocked; then 
		#echo Template already unlock
		return
	fi
	_unlock
	rm -rf "$DEFINE_TEMPLATE_TMP"
	# checks git satus
	git status>/dev/null 2>&1 
	if [ $? != 0 ]; then
		printf $ERROR_COLOR"Couldn\'t unlock template\n"
		printf "Invalid template\n"$CLEAR_COLOR
		_lock
		exit 1
	fi
	# get SHA
	local sha=$(perl "$GITTEMPLATE_DIR/common/config.pl" core.sha);
	if [ -z "$sha" ]; then 
		printf $ERROR_COLOR"Couldn\'t unlock template\n"
		printf "Invalid SHA\n"$CLEAR_COLOR
		_lock
		exit 1
	fi
	git checkout $sha >/dev/null 2>&1
	if [ $? != 0 ]; then
		printf $ERROR_COLOR"Couldn\'t unlock template\n"
		printf "checkout $SHA failed\n"$CLEAR_COLOR
		_lock
		exit 1
	fi
	mkdir -p "$DEFINE_TEMPLATE_CONTENT"
}

porcelain() {
	local gitcmd=$SUBCOMMAND
	local re='-+h(elp)?(\ |$)'
	if [[ "$@" =~ $re ]]; then
		git $gitcmd -h 2>&1 | sed 's/usage\:\ git/usage\:\ git template/g' >&2
		exit 1
	fi

	checkTemplateExist
	local wasLocked=0
	isLocked && wasLocked=1

	unlockTemplate
	cd "$DEFINE_TEMPLATE_GITPATH"
	
	git $gitcmd "$@"
	local ret=$?

	rm -rf "$DEFINE_TEMPLATE_TMP"
	[ $wasLocked == 1 ] && lockTemplate
	exit $ret
}


yesNoPrompt() {
	[[ -t 0 ]] && read -e -n 1 -p "(Y/n)" res
	if [[ $res =~ ^(y|Y)$ ]]
	then
		return 0 # err=0 mean success
	else
		return 1
	fi
}